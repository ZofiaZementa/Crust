name: Rust

on:
  push:
    branches: [ master ]
    paths-ignore:
      - 'README.md'
      - '**/*.nix'
      - 'nix/envrc'
      - 'flake.lock'
  pull_request:
    branches: [ master ]
    paths-ignore:
      - 'README.md'
      - '**/*.nix'
      - 'nix/envrc'
      - 'flake.lock'

env:
  CARGO_TERM_COLOR: always
  RUSTC_FORCE_INCREMENTAL: 1
  CARGO_INCREMENTAL: 1

jobs:
  tagref:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
    
    - name: Install tagref
      run: curl -L https://github.com/stepchowfun/tagref/releases/download/v1.5.0/tagref-x86_64-unknown-linux-gnu > tagref && chmod +x tagref
      
    - name: Check tagref
      run: ./tagref && ./tagref list-unused

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    needs: tagref
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2

    - name: Install nix
      if: ${{ matrix.os == 'ubuntu-latest' }}
      uses: cachix/install-nix-action@v13
      with:
        install_url: https://github.com/numtide/nix-unstable-installer/releases/download/nix-2.4pre20210604_8e6ee1b/install
        extra_nix_config: |
          experimental-features = nix-command flakes
        nix_path: nixpkgs=channel:nixos-unstable

    - name: Setup cachix
      if: ${{ matrix.os == 'ubuntu-latest' }}
      uses: cachix/cachix-action@v10
      with:
        name: harmony
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

    - name: Enter devshell
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
          nix build .#devShell.x86_64-linux 
          source result
          echo "$DEVSHELL_DIR/bin" >> $GITHUB_PATH
          echo "PROTOC=$PROTOC" >> $GITHUB_ENV
          echo "PROTOC_INCLUDE=$PROTOC_INCLUDE" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH" >> $GITHUB_ENV
          echo "C_INCLUDE_PATH=$C_INCLUDE_PATH" >> $GITHUB_ENV
          echo "LIBRARY_PATH=$LIBRARY_PATH" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH" >> $GITHUB_ENV
          echo "RUSTFLAGS=$RUSTFLAGS" >> $GITHUB_ENV
  
    - name: Install rust
      if: ${{ matrix.os != 'ubuntu-latest' }}
      uses: actions-rs/toolchain@v1.0.7
      with:
        toolchain: stable
        default: true
        override: true
        components: rustfmt,clippy

    - name: Cache rust
      uses: Swatinem/rust-cache@v1

    - name: Clippy
      uses: actions-rs/clippy-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        name: 'clippy (${{ matrix.os }})'

    - name: Build
      if: ${{ matrix.os != 'macOS-latest' }}
      run: cargo build --release

    - name: Install cargo bundle
      if: ${{ matrix.os == 'macOS-latest' }}
      run: cargo install cargo-bundle
    
    - name: Build macOS
      if: ${{ matrix.os == 'macOS-latest' }}
      run: cargo bundle --release

    - name: Artifact macOS
      if: ${{ matrix.os == 'macOS-latest' }}
      uses: actions/upload-artifact@v2.2.4
      with:
        name: build-macos
        path: target/release/bundle/osx/Crust.app

    - name: Compress binary
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: upx target/release/crust

    - name: Artifact Linux
      if: ${{ matrix.os == 'ubuntu-latest' }}
      uses: actions/upload-artifact@v2.2.4
      with:
        name: build-linux
        path: target/release/crust

    - name: Artifact Windows
      if: ${{ matrix.os == 'windows-latest' }}
      uses: actions/upload-artifact@v2.2.4
      with:
        name: build-windows
        path: target/release/crust.exe
